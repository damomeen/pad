#include <rofl/common/openflow/experimental/actions/%(header)s_actions.h>

using namespace rofl;


cofaction_push_%(header)s::cofaction_push_%(header)s(
		uint8_t ofp_version,
		uint16_t ethertype) :
				cofaction_experimenter(ofp_version, ROFL_EXPERIMENTER_ID, OFXAT_PUSH_%(header_upper)s, sizeof(struct ofx_action_push_%(header)s_header))
{
	switch (ofp_version) {
	case OFP12_VERSION:
	case OFP13_VERSION: {
		eoac_header = cofaction_experimenter::soaction();

		eoac_push_%(header)s->expbody.type		= htobe16(OFXAT_PUSH_%(header_upper)s);
		eoac_push_%(header)s->expbody.len		= htobe16(sizeof(struct ofp12_action_push));
		eoac_push_%(header)s->expbody.ethertype 	= htobe16(ethertype);
	} break;
	}
}



cofaction_push_%(header)s::cofaction_push_%(header)s(cofaction const& action) :
		cofaction_experimenter(action)
{
	if ((sizeof(struct ofp12_action_experimenter_header) + sizeof(struct ofx_action_push_%(header)s_header)) <
			be16toh(action.oac_header->len))
		throw eBadActionBadLen();

	cofaction::operator= (action);

	eoac_header = soaction();

	if (OFXAT_PUSH_%(header_upper)s != be32toh(eoac_push_%(header)s->exphdr.exp_type))
		throw eBadActionBadExperimenterType();
}



cofaction_push_%(header)s::~cofaction_push_%(header)s()
{

}



uint16_t
cofaction_push_%(header)s::get_ethertype() const
{
	return be16toh(eoac_push_%(header)s->expbody.ethertype);
}



cofaction_pop_%(header)s::cofaction_pop_%(header)s(
		uint8_t ofp_version,
		uint16_t ethertype) :
			cofaction_experimenter(ofp_version, ROFL_EXPERIMENTER_ID, OFXAT_POP_%(header_upper)s, sizeof(struct ofx_action_pop_%(header)s))
{
	switch (ofp_version) {
	case OFP12_VERSION:
	case OFP13_VERSION: {
		eoac_header = cofaction_experimenter::soaction();

		eoac_pop_%(header)s->expbody.type		= htobe16(OFXAT_POP_%(header_upper)s);
		eoac_pop_%(header)s->expbody.len			= htobe16(sizeof(struct ofx_action_pop_%(header)s_header));
		eoac_pop_%(header)s->expbody.ethertype 	= htobe16(ethertype);
	} break;
	}
}




cofaction_pop_%(header)s::cofaction_pop_%(header)s(cofaction const& action) :
	cofaction_experimenter(action)
{
	if ((sizeof(struct ofp12_action_experimenter_header) + sizeof(struct ofx_action_pop_%(header)s)) <
			be16toh(action.oac_header->len))
		throw eBadActionBadLen();

	cofaction::operator= (action);

	eoac_header = soaction();

	if (OFXAT_POP_%(header_upper)s != be32toh(eoac_pop_%(header)s->exphdr.exp_type))
		throw eBadActionBadExperimenterType();
}



cofaction_pop_%(header)s::~cofaction_pop_%(header)s()
{

}



uint16_t
cofaction_pop_%(header)s::get_ethertype() const
{
	return be16toh(eoac_pop_%(header)s->expbody.ethertype);
}


